--- a/nova/virt/libvirt/volume.py
+++ b/nova/virt/libvirt/volume.py
@@ -34,6 +34,8 @@
 from nova import utils
 from nova.virt.libvirt import config as vconfig
 from nova.virt.libvirt import utils as virtutils
+import glob
+import time
 
 LOG = logging.getLogger(__name__)
 
@@ -41,6 +43,9 @@
     cfg.IntOpt('num_iscsi_scan_tries',
                default=3,
                help='number of times to rescan iSCSI target to find volume'),
+    cfg.IntOpt('num_iser_scan_tries',
+               default=3,
+               help='number of times to rescan iSER target to find volume'),
     cfg.StrOpt('rbd_user',
                default=None,
                help='the RADOS client name for accessing rbd volumes'),
@@ -65,6 +70,9 @@
     cfg.BoolOpt('libvirt_iscsi_use_multipath',
                 default=False,
                 help='use multipath connection of the iSCSI volume'),
+    cfg.BoolOpt('libvirt_iser_use_multipath',
+                default=False,
+                help='use multipath connection of the iSER volume'),
     cfg.StrOpt('scality_sofs_config',
                default=None,
                help='Path or URL to Scality SOFS configuration file'),
@@ -162,6 +170,311 @@
             conf.auth_secret_uuid = (conf.auth_secret_uuid or
                                      netdisk_properties['secret_uuid'])
         return conf
+    
+    
+class LibvirtISERVolumeDriver(LibvirtBaseVolumeDriver):
+    """Driver to attach Network volumes to libvirt."""
+    def __init__(self, connection):
+        super(LibvirtISERVolumeDriver,
+              self).__init__(connection, is_block_dev=False)
+
+    def _run_iscsiadm(self, iser_properties, iser_command, **kwargs):
+        check_exit_code = kwargs.pop('check_exit_code', 0)
+        (out, err) = utils.execute('iscsiadm', '-m', 'node', '-T',
+                                   iser_properties['target_iqn'],
+                                   '-p', iser_properties['target_portal'],
+                                   *iser_command, run_as_root=True,
+                                   check_exit_code=check_exit_code)
+        LOG.debug("iscsiadm %s: stdout=%s stderr=%s" %
+                  (iser_command, out, err))
+        return (out, err)
+
+    def _iscsiadm_update(self, iser_properties, property_key, property_value,
+                         **kwargs):
+        iser_command = ('--op', 'update', '-n', property_key,
+                         '-v', property_value)
+        return self._run_iscsiadm(iser_properties, iser_command, **kwargs)
+
+    def _get_target_portals_from_iscsiadm_output(self, output):
+        return [line.split()[0] for line in output.splitlines()]
+
+    @lockutils.synchronized('connect_volume', 'nova-')
+    def connect_volume(self, connection_info, disk_info):
+        """Attach the volume to instance_name."""
+        conf = super(LibvirtISERVolumeDriver,
+                     self).connect_volume(connection_info,
+                                          disk_info)
+
+        iser_properties = connection_info['data']
+
+        libvirt_iser_use_multipath = CONF.libvirt_iser_use_multipath
+
+        if libvirt_iser_use_multipath:
+            #multipath installed, discovering other targets if available
+            #multipath should be configured on the nova-compute node,
+            #in order to fit storage vendor
+            out = self._run_iscsiadm_bare(['-m',
+                                          'discoverydb',
+                                          '-t',
+                                          'sendtargets',
+                                          '-p',
+                                          iser_properties['target_portal'],
+                                          '-I',
+                                          'iser',
+                                          '--discover'],
+                                          check_exit_code=[0, 255])[0] \
+                or ""
+
+            for ip in self._get_target_portals_from_iscsiadm_output(out):
+                props = iser_properties.copy()
+                props['target_portal'] = ip
+                self._connect_to_iser_portal(props)
+
+            self._rescan_iser()
+        else:
+            self._connect_to_iser_portal(iser_properties)
+
+        #host_device = ("/dev/disk/by-path/ip-%s-iscsi-%s-lun-%s" %
+        #               (iser_properties['target_portal'],
+        #                iser_properties['target_iqn'],
+        #                iser_properties.get('target_lun', 0)))
+
+        #if not os.path.exists(host_device):
+            #LOG.debug("**************NOT FOUND***************")
+        time.sleep(10)
+        host_device = None
+        device = ("ip-%s-iscsi-%s-lun-%s" %
+                 (iser_properties['target_portal'],
+                  iser_properties['target_iqn'],
+                  iser_properties.get('target_lun', 0)))
+        look_for_device = glob.glob('/dev/disk/by-path/*%s' % device)
+        LOG.debug("GLOB FILE -  %s " % glob.__file__)
+        LOG.debug("*****LOOK-DEVICE: %s *****" %(look_for_device))
+        LOG.debug("*****DEVICE: %s *****" %(device))
+        if (look_for_device):
+            host_device = look_for_device[0]
+            LOG.debug("*****HOST-DEVICE: %s *****" %(host_device))
+
+        # The /dev/disk/by-path/... node is not always present immediately
+        # TODO(justinsb): This retry-with-delay is a pattern, move to utils?
+        tries = 0
+        disk_dev = disk_info['dev']
+        while not os.path.exists(host_device):
+            if tries >= CONF.num_iser_scan_tries:
+                raise exception.NovaException(_("iSER device not found at %s")
+                                              % (host_device))
+
+            LOG.warn(_("ISER volume not yet found at: %(disk_dev)s. "
+                       "Will rescan & retry.  Try number: %(tries)s") %
+                     locals())
+
+            # The rescan isn't documented as being necessary(?), but it helps
+            self._run_iscsiadm(iser_properties, ("--rescan",))
+
+            tries = tries + 1
+            if not os.path.exists(host_device):
+                time.sleep(tries ** 2)
+
+        if tries != 0:
+            LOG.debug(_("Found iSER node %(disk_dev)s "
+                        "(after %(tries)s rescans)") %
+                      locals())
+
+        if libvirt_iser_use_multipath:
+            #we use the multipath device instead of the single path device
+            self._rescan_multipath()
+            multipath_device = self._get_multipath_device_name(host_device)
+            if multipath_device is not None:
+                host_device = multipath_device
+
+        conf.source_type = "block"
+        conf.source_path = host_device
+        return conf
+
+    @lockutils.synchronized('connect_volume', 'nova-')
+    def disconnect_volume(self, connection_info, disk_dev):
+        """Detach the volume from instance_name."""
+        super(LibvirtISERVolumeDriver,
+              self).disconnect_volume(connection_info, disk_dev)
+        iser_properties = connection_info['data']
+
+        if CONF.libvirt_iser_use_multipath and \
+           "mapper" in connection_info['data']['device_path']:
+            self._rescan_iser()
+            self._rescan_multipath()
+            devices = [dev for dev in self.connection.get_all_block_devices()
+                       if "/mapper/" in dev]
+            if not devices:
+                #disconnect if no other multipath devices
+                self._disconnect_mpath(iser_properties)
+                return
+
+            other_iqns = [self._get_multipath_iqn(device)
+                          for device in devices]
+
+            if iser_properties['target_iqn'] not in other_iqns:
+                #disconnect if no other multipath devices with same iqn
+                self._disconnect_mpath(iser_properties)
+                return
+
+            #else do not disconnect iser portals,
+            #as they are used for other luns
+            return
+
+        # NOTE(vish): Only disconnect from the target if no luns from the
+        #             target are in use.
+        device_prefix = ("/dev/disk/by-path/ip-%s-iscsi-%s-lun-" %
+                         (iser_properties['target_portal'],
+                          iser_properties['target_iqn']))
+        devices = self.connection.get_all_block_devices()
+        devices = [dev for dev in devices if dev.startswith(device_prefix)]
+        if not devices:
+            self._disconnect_from_iser_portal(iser_properties)
+
+    def _connect_to_iser_portal(self, iser_properties):
+        # NOTE(vish): If we are on the same host as nova volume, the
+        #             discovery makes the target so we don't need to
+        #             run --op new. Therefore, we check to see if the
+        #             target exists, and if we get 255 (Not Found), then
+        #             we run --op new. This will also happen if another
+        #             volume is using the same target.
+        try:
+            self._run_iscsiadm(iser_properties, ())
+        except exception.ProcessExecutionError as exc:
+            # iscsiadm returns 21 for "No records found" after version 2.0-871
+            if exc.exit_code in [21, 255]:
+                self._run_iscsiadm(iser_properties, ('--op', 'new'))
+            else:
+                raise
+
+        if iser_properties.get('auth_method'):
+            self._iscsiadm_update(iser_properties,
+                                  "node.session.auth.authmethod",
+                                  "None")
+#                                  iser_properties['auth_method'])
+            self._iscsiadm_update(iser_properties,
+                                  "node.session.auth.username",
+                                  "")
+#                                  iser_properties['auth_username'])
+            self._iscsiadm_update(iser_properties,
+                                  "node.session.auth.password",
+                                  "")
+#                                  iser_properties['auth_password'])
+
+        self._iscsiadm_update(iser_properties, "iface.transport_name", "iser")
+        self._iscsiadm_update(iser_properties, "node.conn[0].iscsi.HeaderDigest", "None")
+
+        #duplicate logins crash iscsiadm after load,
+        #so we scan active sessions to see if the node is logged in.
+        out = self._run_iscsiadm_bare(["-m", "session"],
+                                      run_as_root=True,
+                                      check_exit_code=[0, 1, 21])[0] or ""
+
+        portals = [{'portal': p.split(" ")[2], 'iqn': p.split(" ")[3]}
+                   for p in out.splitlines() if p.startswith("tcp:")]
+
+        stripped_portal = iser_properties['target_portal'].split(",")[0]
+        if len(portals) == 0 or len([s for s in portals
+                                     if stripped_portal ==
+                                     s['portal'].split(",")[0]
+                                     and
+                                     s['iqn'] ==
+                                     iser_properties['target_iqn']]
+                                    ) == 0:
+            try:
+                LOG.debug("*****ENTER LOGIN*****")
+                LOG.debug("******ISER PROP: %s ********" %(iser_properties))
+                self._run_iscsiadm(iser_properties,
+                                   ("--login",),
+                                   check_exit_code=[0, 255])
+            except exception.ProcessExecutionError as err:
+                #as this might be one of many paths,
+                #only set successfull logins to startup automatically
+                if err.exit_code in [15]:
+                    self._iscsiadm_update(iser_properties,
+                                          "node.startup",
+                                          "automatic")
+                    return
+
+            self._iscsiadm_update(iser_properties,
+                                  "node.startup",
+                                  "automatic")
+
+    def _disconnect_from_iser_portal(self, iser_properties):
+        self._iscsiadm_update(iser_properties, "node.startup", "manual",
+                              check_exit_code=[0, 21, 255])
+        self._run_iscsiadm(iser_properties, ("--logout",),
+                           check_exit_code=[0, 21, 255])
+        self._run_iscsiadm(iser_properties, ('--op', 'delete'),
+                           check_exit_code=[0, 21, 255])
+
+    def _get_multipath_device_name(self, single_path_device):
+        device = os.path.realpath(single_path_device)
+        out = self._run_multipath(['-ll',
+                                  device],
+                                  check_exit_code=[0, 1])[0]
+        mpath_line = [line for line in out.splitlines()
+                      if "scsi_id" not in line]  # ignore udev errors
+        if len(mpath_line) > 0 and len(mpath_line[0]) > 0:
+            return "/dev/mapper/%s" % mpath_line[0].split(" ")[0]
+
+        return None
+
+    def _get_iser_devices(self):
+        try:
+            devices = list(os.walk('/dev/disk/by-path'))[0][-1]
+        except IndexError:
+            return []
+        return [entry for entry in devices if entry.startswith("ip-")]
+
+    def _disconnect_mpath(self, iser_properties):
+        entries = self._get_iser_devices()
+        ips = [ip.split("-")[1] for ip in entries
+               if iser_properties['target_iqn'] in ip]
+        for ip in ips:
+            props = iser_properties.copy()
+            props['target_portal'] = ip
+            self._disconnect_from_iser_portal(props)
+
+        self._rescan_multipath()
+
+    def _get_multipath_iqn(self, multipath_device):
+        entries = self._get_iser_devices()
+        for entry in entries:
+            entry_real_path = os.path.realpath("/dev/disk/by-path/%s" % entry)
+            entry_multipath = self._get_multipath_device_name(entry_real_path)
+            if entry_multipath == multipath_device:
+                return entry.split("iser-")[1].split("-lun")[0]
+        return None
+
+    def _run_iscsiadm_bare(self, iser_command, **kwargs):
+        check_exit_code = kwargs.pop('check_exit_code', 0)
+        (out, err) = utils.execute('iscsiadm',
+                                   *iser_command,
+                                   run_as_root=True,
+                                   check_exit_code=check_exit_code)
+        LOG.debug("iscsiadm %s: stdout=%s stderr=%s" %
+                  (iser_command, out, err))
+        return (out, err)
+
+    def _run_multipath(self, multipath_command, **kwargs):
+        check_exit_code = kwargs.pop('check_exit_code', 0)
+        (out, err) = utils.execute('multipath',
+                                   *multipath_command,
+                                   run_as_root=True,
+                                   check_exit_code=check_exit_code)
+        LOG.debug("multipath %s: stdout=%s stderr=%s" %
+                  (multipath_command, out, err))
+        return (out, err)
+
+    def _rescan_iser(self):
+        self._run_iscsiadm_bare(('-m', 'node', '--rescan'),
+                                check_exit_code=[0, 1, 21, 255])
+        self._run_iscsiadm_bare(('-m', 'session', '--rescan'),
+                                check_exit_code=[0, 1, 21, 255])
+
+    def _rescan_multipath(self):
+        self._run_multipath('-r', check_exit_code=[0, 1, 21])
 
 
 class LibvirtISCSIVolumeDriver(LibvirtBaseVolumeDriver):
